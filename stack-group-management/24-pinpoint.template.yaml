---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'PinPoint'
Parameters:
  KeyName:
    Description: 'Pem Key for SSH Access'
    Type: String
    Default: 'NavitasDevOps'
  InstanceType:
    Description: 'Instance type'
    Type: String
    Default: 't2.large'

Mappings:
  RegionMap:
    'us-east-1':
      AMI: 'ami-14c5486b'
Resources:

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets: 
      - !ImportValue %%SGNAME%%-01-vpc:public-subnet-a
      - !ImportValue %%SGNAME%%-01-vpc:public-subnet-b
      Listeners:
      - InstancePort: 8080
        InstanceProtocol: HTTP
        LoadBalancerPort: 80
        Protocol: HTTP
      HealthCheck:
        HealthyThreshold: 3
        Interval: 30
        Target: 'TCP:8080'
        Timeout: 3
        UnhealthyThreshold: 10
      SecurityGroups:
      - !ImportValue %%SGNAME%%-20-SG:ELBSecurityGroup
      Scheme: 'internet-facing'
      CrossZone: true

   
  ## Jenkins  
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 5

  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:  [awslogs, config]
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${Logs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${Logs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${Logs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${Logs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${Logs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${Logs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=LaunchConfiguration
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      AssociatePublicIpAddress: false
      EbsOptimized: false
      IamInstanceProfile: !ImportValue %%SGNAME%%-19-IAMRoles:JenkinsInstanceRole
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
      -  !ImportValue %%SGNAME%%-20-SG:EC2SecurityGroup
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          trap '/opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}' ERR
          INSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
          
          LOCAL_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/local-hostname | cut -d '.' -f1)
          cat << EOF >> /etc/hosts
          127.0.0.1 $LOCAL_HOSTNAME
          EOF

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}

          wget -O /tmp/install-pinpoint.sh https://raw.githubusercontent.com/navitastech-rfad/devops-config/master/pinpoint/install-pinpoint.sh

          chmod 755 /tmp/install-pinpoint.sh

           /tmp/install-pinpoint.sh > /tmp/install-pinpoint.log

          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref LaunchConfiguration
      HealthCheckGracePeriod: 600
      LoadBalancerNames:
      - !Ref LoadBalancer
      HealthCheckType: ELB
      MaxSize: 1
      MinSize: 1
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-PinPoint'
        PropagateAtLaunch: true
      VPCZoneIdentifier:
      - !ImportValue %%SGNAME%%-01-vpc:private-subnet-a
      - !ImportValue %%SGNAME%%-01-vpc:private-subnet-b
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  URL:
    Description: 'Load BalancerURL to Kong API Gateway.'
    Value: !Sub 'http://${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNS'
   